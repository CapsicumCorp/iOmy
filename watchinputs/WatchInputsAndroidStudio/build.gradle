import org.gradle.internal.os.OperatingSystem;

// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle-experimental:0.8.1'
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

//NDK Options
//NOTE: Using GNU libc++ as as stlport doesn't have very good support for C++11: http://stackoverflow.com/questions/17901534/android-ndk-strange-error and LLVM libc++ has some crash problems and makes larger code
//NOTE2: clang with ndk 10d, 11, and 12 causes crashes in the c code, gcc 4.9 works fine
//NOTE: Only armeabi, mips, and x86 are available with NDK Platform <= 19, only armeabi is available <= 8
//NOTE: mips64 seems to have a build issue at the moment with CrystaX
//NOTE: See https://code.google.com/p/android/issues/detail?id=73725 We are compiling NDK with SDK version 9 so binary code will run on older Android
//  You will need to select 21 to compile for newer ABIs such as arm64-v8a, x86_64, or mips64
//project.ext.NDKTOOLCHAIN="clang"
//project.ext.NDKTOOLCHAINVER="3.8"
project.ext.NDKTOOLCHAIN="gcc"
project.ext.NDKTOOLCHAINVER="5"
project.ext.NDKSTL="gnustl_shared"
project.ext.NDKCOMPILESDKVERSION="9" //9 (Gingerbread 2.3 - 2.3.2)
//project.ext.NDKCOMPILESDKVERSION="21" // >=21 (Lollipop 5.0) needed for arm64-v8a
//project.ext.NDKCOMPILESDKVERSION="24" //Android 7.0 (Nougat)
//project.ext.APP_ABIS = ["armeabi"]
//project.ext.APP_ABIS = ["armeabi","armeabi-v7a"]
//project.ext.APP_ABIS = ["arm64-v8a"]
project.ext.APP_ABIS = ["armeabi","armeabi-v7a","x86","mips"]
//project.ext.APP_ABIS = ["armeabi","armeabi-v7a","arm64-v8a","x86","x86_64","mips"]

//List all the boost libraries that are being used by all libraries
project.ext.BOOST_SHARED_LIBS = ["boost_system", "boost_thread", "boost_chrono"]

// Enable Debug
project.ext.ENABLE_DEBUG=1

// Enable Pedantic
project.ext.ENABLE_PEDANTIC=1

// Use superuser if enable
project.ext.USE_SUPERUSER=1

// RapidHA Debugging
//project.ext.RAPIDHALIB_LOCKDEBUG=1
//project.ext.RAPIDHALIB_MOREDEBUG=1
//project.ext.RAPIDHALIB_DEBUGWITHOUTDATABASE=1

// ZigBee Debugging
//project.ext.ZIGBEELIB_LOCKDEBUG=1
//project.ext.ZIGBEELIB_MOREDEBUG=1
//project.ext.ZIGBEELIB_SENDDEBUG=1
project.ext.ZIGBEELIB_DEBUGWITHOUTDATABASE=1

// UserspaceUSBSerialAndroid Debugging
//project.ext.USERSPACEUSBSERIALANDROIDLIB_LOCKDEBUG=1
//project.ext.USERSPACEUSBSERIALANDROIDLIB_MOREDEBUG=1

// Lock Debugging
//project.ext.LOCKLIB_LOCKDEBUG=1

//Without this lint complains about functions in the mysql connector that reference
//  features not available in Android Java but we aren't using them so it won't be an issue
task lintCheck() {
    getAllTasks(true).each {
        def lintTasks = it.value.findAll { it.name.contains("lint") }
        lintTasks.each {
            it.enabled = false
        }
    }
}

project.ext.COMMON_CFLAGS=[]
project.ext.COMMON_CPPFLAGS=[]
project.ext.COMMONFLAGS=[]

COMMONFLAGS.add('-DAPPNAME=\"WatchInputsiOmy\"')

COMMONFLAGS.addAll(['-Wall', '-Wextra', '-Wfloat-equal'])
if (ext.has('ENABLE_PEDANTIC')) {
    logger.quiet('DEBUG: Enabling pedantic option');
    COMMONFLAGS.add('-pedantic')
}
if (ext.has('ENABLE_DEBUG')) {
    logger.quiet('DEBUG: Enabling debug option');
    COMMONFLAGS.add('-DDEBUG')
}
if (ext.has('USE_SUPERUSER')) {
    logger.quiet('DEBUG: Enabling android superuser option');
    COMMONFLAGS.add('-DANDROID_SUPERUSER')
}

COMMON_CFLAGS.add('-std=c99')
COMMON_CFLAGS.addAll(COMMONFLAGS)
COMMON_CPPFLAGS.add('-std=c++11')
COMMON_CPPFLAGS.add('-fexceptions')
COMMON_CPPFLAGS.add('-frtti')
COMMON_CPPFLAGS.addAll(COMMONFLAGS)

logger.quiet('DEBUG: COMMONFLAGS=' + COMMONFLAGS)
logger.quiet('DEBUG: COMMON_CFLAGS=' + COMMON_CFLAGS)
logger.quiet('DEBUG: COMMON_CPPFLAGS=' + COMMON_CPPFLAGS)
logger.quiet('DEBUG: NDKTOOLCHAIN=' + NDKTOOLCHAIN)
logger.quiet('DEBUG: NDKTOOLCHAINVER=' + NDKTOOLCHAINVER)
logger.quiet('DEBUG: NDKSTL=' + NDKSTL)
logger.quiet('DEBUG: NDKCOMPILESDKVERSION=' + NDKCOMPILESDKVERSION)
logger.quiet('DEBUG: APP_ABIs=' + APP_ABIS)
logger.quiet('DEBUG: BOOST_LIBRARIES=' + BOOST_SHARED_LIBS)
APP_ABIS.each {
    abi ->
    logger.quiet('DEBUG: CrystaX ' + abi + ' source library dir=' + getLibCrystaxDir(abi))
    logger.quiet('DEBUG: Boost ' + abi + ' source library dir=' + getBoostLibDir(abi))
}
//--------------------------------------------------
//Code copied from https://www.crystax.net/en/blog/7
//--------------------------------------------------

//NOTE: getBoostLibDir modified to handle different versions of compiler

def getNdkDir() {
    if (System.env.ANDROID_NDK_ROOT != null)
        return System.env.ANDROID_NDK_ROOT

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkdir = properties.getProperty('ndk.dir', null)
    if (ndkdir == null)
        throw new GradleException("""\
                NDK location not found.
                Define location with ndk.dir in the local.properties file
                or with an ANDROID_NDK_ROOT environment variable.""")

    return ndkdir
}

def getCrystaxNdkDir() {
    def ndkDir = getNdkDir()
    if (!(new File(ndkDir, "sources/crystax").exists()))
        throw new GradleException("""\
            '${ndkDir}' is not a CrystaX NDK.
            Edit ndk.dir in local.properties or set ANDROID_NDK_ROOT
            environment variable pointing to CrystaX NDK""")

    return ndkDir
}

def getFlavorName(abi) {
    switch (abi) {
        case "armeabi":
            return "arm";
        case "armeabi-v7a":
            return "arm7"
        case "arm64-v8a":
            return "arm64"
        case "fat":
            return "fat"
        default:
            return abi.replaceAll('-', '_')
    }
}

def getToolchainName(abi) {
    switch (abi) {
        case ~/^armeabi.*/:
            return "arm-linux-androideabi"
        case ~/^arm64.*/:
            return "aarch64-linux-android"
        case "mips":
            return "mipsel-linux-android"
        case "mips64":
            return "mips64el-linux-android"
        case ["x86", "x86_64"]:
            return abi
        default:
            throw new GradleException("Unsupported ABI: '${abi}'")
    }
}

def getToolchainPrefix(abi) {
    switch (abi) {
        case ~/^armeabi.*/:
            return "arm-linux-androideabi"
        case ~/^arm64.*/:
            return "aarch64-linux-android"
        case "mips":
            return "mipsel-linux-android"
        case "mips64":
            return "mips64el-linux-android"
        case "x86":
            return "i686-linux-android"
        case "x86_64":
            return "x86_64-linux-android"
        default:
            throw new GradleException("Unsupported ABI: '${abi}'")
    }
}

def getHostOS() {
    if (org.gradle.internal.os.OperatingSystem.current().isLinux())
        return "linux"
    if (org.gradle.internal.os.OperatingSystem.current().isMacOsX())
        return "darwin"
    if (org.gradle.internal.os.OperatingSystem.current().isWindows())
        return "windows"
    throw new GradleException("Unsupported host OS")
}

def getHostArch() {
    def arch = System.getProperty("os.arch")
    switch (arch) {
        case ["x86_64", "amd64"]:
            return "x86_64"
        case ~/^i[3456]86/:
        case "x86":
            return "x86"
        default:
            throw new GradleException("Can't detect host's CPU architecture: '${arch}'")
    }
}

def getHostTag() {
    def tag = getHostOS()
    def arch = getHostArch()
    if (tag != "windows" || arch != "x86")
        tag += "-${arch}"
    return tag
}

def getStripExecutable(abi) {
    def ndk = getCrystaxNdkDir()
    def toolchainName = getToolchainName(abi)
    def toolchainPrefix = getToolchainPrefix(abi)
    def hostTag = getHostTag()
    def strip = "${ndk}/toolchains/${toolchainName}-5/prebuilt/${hostTag}/bin/${toolchainPrefix}-strip"
    if (org.gradle.internal.os.OperatingSystem.current().isWindows())
        strip = strip.replaceAll('/', '\\\\') + '.exe'
    return strip
}

def getPrebuiltLibPaths(abi) {
    def paths = []
    paths += getBoostLibDir(abi)
    paths += getLibCrystaxDir(abi)
    return paths
}

def getLibCrystaxDir(abi) {
    return "${getCrystaxNdkDir()}/sources/crystax/libs/${abi}"
}

def getLibCrystax(abi) {
    return "${getLibCrystaxDir(abi)}/libcrystax.so"
}

def getBoostDir() {
    return "${getCrystaxNdkDir()}/sources/boost/1.59.0"
}

def getBoostIncDir() {
    return "${getBoostDir()}/include"
}

def getBoostLibDir(abi) {
    def prefix=""
    switch (NDKTOOLCHAIN) {
        case "gcc":
            prefix = "gnu"
            break
        case "clang":
            prefix = "llvm"
            break
        default:
            throw new GradleException("Unknown compiler: ${NDKTOOLCHAIN}")
    }
    return "${getBoostDir()}/libs/${abi}/${prefix}-${NDKTOOLCHAINVER}"
}

//--------------------------------------------------
